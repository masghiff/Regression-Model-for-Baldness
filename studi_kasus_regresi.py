# -*- coding: utf-8 -*-
"""Studi_Kasus_Regresi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bvvvMzQ6g_AcdL-tM009spNQejePcrh0
"""

from google.colab import files
uploaded = files.upload()

import io
import pandas as pd

df = pd.read_csv(io.BytesIO(uploaded['Case Study Chapter 3 Topic 3_ Dataset Kebotakan (Not Clean).csv']))

df.head()

df.info()

df.isnull().sum()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statistics import mode

df['is_menikah'] = df.apply(lambda x: x['umur'] > 30 if np.isnan(x['is_menikah']) else x['is_menikah'], axis=1)
df['is_keturunan'].fillna(0, inplace=True)
df['is_merokok'].fillna(1, inplace=True)

df['umur'].fillna(df['umur'].mean(), inplace=True)
df['gaji'].fillna(df['gaji'].mean(), inplace=True)
df['tinggi'].fillna(df['berat'].mean(), inplace=True)
df['berat'].fillna(df['tinggi'].mean(), inplace=True)
df['stress'].fillna(df['stress'].mean(), inplace=True)

df['jenis_kelamin'].fillna(df['jenis_kelamin'].mode()[0], inplace=True)
df['provinsi'].fillna(df['provinsi'].mode()[0], inplace=True)
df['sampo'].fillna(df['sampo'].mode()[0], inplace=True)
df['pendidikan'].fillna(df['pendidikan'].mode()[0], inplace=True)
df['pekerjaan'].fillna(df['pekerjaan'].mode()[0], inplace=True)

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

df

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

kolom_numerik = ['berat', 'tinggi']
plt.boxplot(df[kolom_numerik])
plt.xticks([1, 2], kolom_numerik)
plt.title('Oulier Sebelum Dibuang')
plt.show()
print(f'Jumlah baris dengan outlier: {df.shape[0]}')

Q1 = df[kolom_numerik].quantile(0.25)
Q3 = df[kolom_numerik].quantile(0.75)
IQR = Q3 - Q1

df = df[~((df[kolom_numerik] < (Q1 - 1.5 * IQR)) | (df[kolom_numerik] > (Q3 + 1.5 * IQR))).any(axis=1)]

kolom_numerik = ['berat', 'tinggi']
plt.boxplot(df[kolom_numerik])
plt.xticks([1, 2], kolom_numerik)
plt.title('Oulier Setelah Dibuang')
plt.show()
print(f'Jumlah baris tanpa outlier: {df.shape[0]}')

df

from matplotlib.lines import Line2D

fig, axs = plt.subplots(1, 3, figsize=(14,5))

sns.kdeplot(data=df, x='berat', ax=axs[0], fill=True)
axs[0].axvline(x=df.berat.median(), color='blue', ls='--', lw=1.5)
axs[0].axvline(x=df.berat.mean(), color='red', ls='--', lw=1.5)
axs[0].axvline(x=df.berat.mode()[0], color='green', ls='--', lw=1.5)

colors = ['blue', 'red', 'green']
lines = [Line2D([0], [0], color=c, linewidth=2, linestyle='--') for c in colors]
labels = ['Median', 'Mean', 'Mode']
axs[0].legend(lines, labels)

sns.kdeplot(data=df, x='tinggi', ax=axs[1], fill=True, color='red')
axs[1].axvline(x=df.tinggi.median(), color='blue', ls='--', lw=1.5)
axs[1].axvline(x=df.tinggi.mean(), color='red', ls='--', lw=1.5)
axs[1].axvline(x=df.tinggi.mode()[0], color='green', ls='--', lw=1.5)
axs[1].set_ylabel('')

axs[1].annotate('Median dan mean', xy=(156.2, 0.0663), xytext=(141.1, 0.0579), arrowprops = dict(arrowstyle = '->', color='black'), fontsize=10)

sns.kdeplot(data=df, x='umur', ax=axs[2], fill=True, color='orange')
axs[2].axvline(x=df.umur.median(), color='blue', ls='--', lw=1.5)
axs[2].axvline(x=df.umur.mean(), color='red', ls='--', lw=1.5)
axs[2].axvline(x=df.umur.mode()[0], color='green', ls='--', lw=1.5)
axs[2].set_ylabel('')

plt.tight_layout()
plt.show()

fig2, axs2 = plt.subplots(2,2, figsize=(15,5))

df.groupby('pekerjaan').size().plot(kind='pie', ax=axs2[0,0], autopct = '%.1f%%', radius=1.3)
df.groupby('sampo').size().plot(kind='pie', ax=axs2[0,1], autopct = '%.1f%%', radius=1.3)
df.groupby('jenis_kelamin').size().plot(kind='pie', ax=axs2[1,0], autopct = '%.1f%%', radius=1.3)
df.groupby('is_merokok').size().plot(kind='pie', ax=axs2[1,1], autopct = '%.1f%%', radius=1.3)

axs2[0,0].set_ylabel('')
axs2[0,1].set_ylabel('')
axs2[1,0].set_ylabel('')
axs2[1,1].set_ylabel('is_merokok')
plt.tight_layout()
plt.show()

prob_botak_70 = df[df['botak_prob'] >= 0.7]

prob_botak_70

fig3, axs3 = plt.subplots()
sns.histplot(prob_botak_70, x='umur', bins=20, color='blue', alpha=0.5, kde=True, ax=axs3)
axs3.lines[0].set_color('red')
axs3.axvline(x=prob_botak_70.umur.mean(), color='green', ls='--', lw=2)
axs3.text(11, 79, r'$\mu={}$'.format('%.2f' % prob_botak_70['umur'].mean()), style='italic', bbox={'facecolor': 'red', 'alpha': 0.5, 'pad': 10})
plt.show()

fig4, axs4 = plt.subplots(1, 3, figsize=(15,5))
sns.countplot(data=prob_botak_70, x='is_merokok', ax=axs4[0])
axs4[0].set_xticks([0,1], ['Tidak Merokok', 'Merokok'])
axs4[0].set_xlabel('')

sns.countplot(data=prob_botak_70, x='is_menikah', ax=axs4[1])
axs4[1].set_xticks([0,1], ['Belum Menikah', 'Sudah Menikah'])
axs4[1].set_xlabel('')
axs4[1].set_ylabel('')

sns.countplot(data=prob_botak_70, x='is_keturunan', ax=axs4[2])
axs4[2].set_xticks([0,1], ['Tidak Punya Keturunan', 'Punya Keturunan'])
axs4[2].set_xlabel('')
axs4[2].set_ylabel('')

plt.show()

prob_botak_70.groupby('pekerjaan').size().plot(kind='pie', autopct='%.1f%%')
plt.ylabel('')
plt.show()

prob_botak_70.groupby('pendidikan').size().plot(kind='pie', autopct='%.1f%%')
plt.ylabel('')
plt.show()

from sklearn.preprocessing import MinMaxScaler

df['berat'] = MinMaxScaler().fit_transform(df['berat'].values.reshape(len(df), 1))
df['tinggi'] = MinMaxScaler().fit_transform(df['tinggi'].values.reshape(len(df), 1))

df

from sklearn.preprocessing import StandardScaler

df['umur'] = StandardScaler().fit_transform(df['umur'].values.reshape(len(df), 1))
df['gaji'] = StandardScaler().fit_transform(df['gaji'].values.reshape(len(df), 1))

df

df_onehot = pd.get_dummies(df, columns=['jenis_kelamin', 'pekerjaan', 'provinsi', 'sampo', 'pendidikan'])

df_onehot

df_onehot = df_onehot.dropna()

X = df_onehot.drop('botak_prob', axis=1)
y = df_onehot['botak_prob']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train, y_train)

test_predictions = model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error

MAE = mean_absolute_error(y_test, test_predictions)
MSE = mean_squared_error(y_test, test_predictions)

print(MAE, MSE)

from sklearn.preprocessing import PolynomialFeatures

polynomial_converter = PolynomialFeatures(degree=2, include_bias=False)
poly_feature = polynomial_converter.fit_transform(X)

poly_feature

X_train, X_test, y_train, y_test = train_test_split(poly_feature, y, test_size=0.3, random_state=101)

model = LinearRegression(fit_intercept=True)
model.fit(X_train, y_train)

test_predictions = model.predict(X_test)
MAE = mean_absolute_error(y_test, test_predictions)
MSE = mean_squared_error(y_test, test_predictions)
print(MAE, MSE)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, test_predictions)
print(r2)

polynomial_converter = PolynomialFeatures(degree=3, include_bias=False)
poly_feature = polynomial_converter.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(poly_feature, y, test_size=0.3, random_state=101)

X_train

from sklearn.linear_model import Ridge

ridge_model = Ridge(alpha=10)
ridge_model.fit(X_train, y_train)
test_predictions = ridge_model.predict(X_test)

MAE = mean_absolute_error(y_test, test_predictions)
MSE = mean_squared_error(y_test, test_predictions)
print(MAE, MSE)

from sklearn.linear_model import RidgeCV

ridge_cv_model = RidgeCV(alphas=(0.1, 1.0, 10.0), scoring='neg_mean_absolute_error')
ridge_cv_model.fit(X_train, y_train)

test_predictions = ridge_cv_model.predict(X_test)
MAE = mean_absolute_error(y_test, test_predictions)
MSE = mean_squared_error(y_test, test_predictions)
print(MAE, MSE)

from sklearn.linear_model import ElasticNetCV

elastic_model = ElasticNetCV(l1_ratio=[.1, .5, .7, .9, .95, .99, 1], tol=0.01)
elastic_model.fit(X_train, y_train)

test_predictions = ridge_cv_model.predict(X_test)
MAE = mean_absolute_error(y_test, test_predictions)
MSE = mean_squared_error(y_test, test_predictions)
print(MAE, MSE)